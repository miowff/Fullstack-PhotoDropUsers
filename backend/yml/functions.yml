AuthorizeUser:
  handler: src/lambdas/authorizer.handler

PhotosReceivedDispatcher:
  handler: src/lambdas/photos/photosReceivedDispatcher.handler
  events:
    - sns: photosUploadedAlerts

GetCode:
  handler: src/lambdas/users/getCode.handler
  events:
    - httpApi:
        path: /request-code
        method: POST

LoginOrRegister:
  handler: src/lambdas/users/loginOrRegister.handler
  events:
    - httpApi:
        path: /login-or-register
        method: POST

RefreshToken:
  handler: src/lambdas/users/refreshAccessToken.handler
  events:
    - httpApi:
        path: /refresh-token
        method: POST

GetCurrent:
  handler: src/lambdas/users/getCurrentUser.handler
  events:
    - httpApi:
        path: /current-user
        method: GET
        authorizer:
          name: usersAuthorizer

Update:
  handler: src/lambdas/users/update.handler
  events:
    - httpApi:
        path: /update/{update}
        method: PUT
        authorizer:
          name: usersAuthorizer

RequestUploadProfilePicUrl:
  handler: src/lambdas/users/requestUploadProfilePicUrl.handler
  events:
    - httpApi:
        path: /request-upload-profile-pic-url
        method: POST
        authorizer:
          name: usersAuthorizer

UpdateUserProfilePic:
  handler: src/lambdas/users/updateProfilePic.handler
  events:
    - s3:
        bucket: photo-drop-images
        event: s3:ObjectCreated:*
        existing: true
        rules:
          - prefix: profilePics/
  memorySize: 1000
  timeout: 10

GetAlbums:
  handler: src/lambdas/albums/getUserAlbums.handler
  events:
    - httpApi:
        path: /albums
        method: GET
        authorizer:
          name: usersAuthorizer

GetAllPhotos:
  handler: src/lambdas/photos/getAllUserPhotos.handler
  events:
    - httpApi:
        path: /photos
        method: GET
        authorizer:
          name: usersAuthorizer
